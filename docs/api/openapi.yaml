openapi: 3.1.0
info:
  title: Student Course Enrollment System API
  description: >-
    A RESTful API for a student course enrollment platform, fulfilling the
    backend development assignment. It manages colleges, students, and courses,
    with a primary focus on an enrollment operation that prevents timetable
    clashes. Includes bonus admin functionality for managing timetables.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Authentication
    description: User registration and login.
  - name: Student Enrollment
    description: The core operation for students to enroll in courses.
  - name: Admin - Timetable Management
    description: Bonus functionality for administrators to manage course schedules.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Generic Schemas
    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time

    # Authentication Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: 'student@example.com'
        role:
          type: string
          enum: [STUDENT, COLLEGE_ADMIN]
          example: 'STUDENT'

    # Enrollment Schemas
    EnrolledCourse:
      type: object
      properties:
        courseId:
          type: integer
          example: 1
        courseCode:
          type: string
          example: 'CS101'
        courseName:
          type: string
          example: 'Introduction to Programming'

    # Timetable Schemas
    TimetableSlot:
      type: object
      properties:
        id:
          type: integer
          example: 1
        dayOfWeek:
          type: integer
          minimum: 1
          maximum: 7
          example: 1
        startTime:
          type: string
          format: time
          example: '09:00'
        endTime:
          type: string
          format: time
          example: '10:30'

paths:
  # --- Authentication ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a New User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, confirmPassword, role, name, collegeId]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
                confirmPassword:
                  type: string
                role:
                  type: string
                  enum: [student, college_admin]
                name:
                  type: string
                collegeId:
                  type: integer
                studentNumber:
                  type: string
                  description: Required if role is 'student'.
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: User with this email already exists.
        '422':
          description: Validation error.

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials.

  # --- Student Enrollment ---
  /enrollments:
    post:
      tags: [Student Enrollment]
      summary: Enroll in Courses
      description: >-
        Allows an authenticated student to enroll in one or more courses.
        This is an atomic operation: if any course enrollment fails
        (e.g., timetable clash, invalid course ID, different college), none of the enrollments will be saved.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [courseIds]
              properties:
                courseIds:
                  type: array
                  items:
                    type: integer
                  minItems: 1
                  example: [1, 2]
      responses:
        '201':
          description: Enrollment successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      enrolled:
                        type: array
                        items:
                          $ref: '#/components/schemas/EnrolledCourse'
        '409':
          description: Timetable conflict detected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request (e.g., student and course are from different colleges).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (user is not a student).

  # --- Admin Timetable Management ---
  /admin/courses/{courseId}/timetable:
    post:
      tags: [Admin - Timetable Management]
      summary: Add Timetable Slots to a Course
      description: >-
        Allows an admin to add one or more timetable slots to a course.
        Prevents adding slots that clash with existing ones for the same course
        or with the schedules of already enrolled students.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  dayOfWeek:
                    type: integer
                    example: 1
                  startTime:
                    type: string
                    example: '11:00'
                  endTime:
                    type: string
                    example: '12:30'
      responses:
        '201':
          description: Timetable slots created successfully.
        '409':
          description: Conflict with existing schedule.
        '403':
          description: Forbidden (user is not an admin or does not manage this college).

  /admin/timetables/{timetableId}:
    patch:
      tags: [Admin - Timetable Management]
      summary: Update a Timetable Slot
      security:
        - bearerAuth: []
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dayOfWeek: { type: integer }
                startTime: { type: string }
                endTime: { type: string }
    delete:
      tags: [Admin - Timetable Management]
      summary: Delete a Timetable Slot
      security:
        - bearerAuth: []
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Timetable slot deleted successfully.
